var app = require('../app');
var debug = require('debug')('forgetmenote:server');
const socket = require('socket.io');
// var http = require('http');
const server = require("http").Server(app);
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// var server = http.createServer(app);

const io = socket(server)
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
io.on('connection', socket => {
  console.log('A user connected');
  
  // Socket.IO event handlers and logic can be added here
  
  socket.on('disconnect', () => {
    console.log('A user disconnected');
  });
});


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
// const io = socketio(server);
// require('../socket')(io);